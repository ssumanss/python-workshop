{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"Home"},{"location":"day1/","text":"Day 1: Variables and Mathematical Operations \u00b6 The agenda of the first day is to do some trivial things, like printing something and doing school arithmetic. Day 1: Variables and Mathematical Operations 1. Print Function 2. Defining variable 3. Mathematical Operations 3.1 Mathematical Expression 4. References 1. Print Function \u00b6 A program can be perfect but produce no output unless it is not told to do so. To get the output from the program we have to use print function. Like mathematics functions in python are objects which takes some input and produce some output. Many functions are inbuilt in python. Later we will learn to define our own functions. Now let's try the first program in any language is usually printing Hello World! . In python it is very simple and intuitive. print ( \"Hello World!\" ) Hello World! 2. Defining variable \u00b6 In every programming language, we can assign something a value. To define a variable just choose a variable name and assign it to a value using = as follows x = 24 # an integer pi = 3.14 # a float msg = \"Hello World!\" # a string Now we can recall these value by it's variable. Like here msg is assigned to Hello World! . We can print this by simply print ( x ) print ( pi ) print ( msg ) 24 3.14 Hello World! Ex: Choose three variables and assign one as an integer, one as a float and one as a string, and print them. Warning A variable can be assigned multiple times in a program. Only the last value will be printed. name = \"Ram Kumar\" # name is Ram Kumar name = \"Shyam Kumar\" # name is Shyam Kumar print ( name ) Shyam Kumar Tip The line after # got ignored by the python. It is called a comment in any programming language. You can use comment to add some instructions to the code. 3. Mathematical Operations \u00b6 Mathematical operations, i.e., addition, subtraction etc. can be done as 5 + 6 # addition 5 - 6 # subtraction 5 * 6 # multiplication 5 / 6 # division 5 ** 6 # exponent or power Ex: Choose two variable x and y and assign each one as an integer. Try each of the above operations on them like x+y . Finally print them x = 2 y = 3 z = x + y print ( z ) 5 3.1 Mathematical Expression \u00b6 We can use these operations to evaluate complicated mathematical expressions in python, for example, we can compute f(x) = \\frac{x^2 + 1}{y-1} as follows x = 5 y = 3 z = ( x ** 2 + 1 ) / ( y - 1 ) print ( z ) 13 4. References \u00b6 Official Python Refererence Matplotlib Documentation Basic Math, Mathematical Operators and Python Expressions Gallery Matplotlib","title":"Day 1: Variable"},{"location":"day1/#day-1-variables-and-mathematical-operations","text":"The agenda of the first day is to do some trivial things, like printing something and doing school arithmetic. Day 1: Variables and Mathematical Operations 1. Print Function 2. Defining variable 3. Mathematical Operations 3.1 Mathematical Expression 4. References","title":"Day 1: Variables and Mathematical Operations"},{"location":"day1/#1-print-function","text":"A program can be perfect but produce no output unless it is not told to do so. To get the output from the program we have to use print function. Like mathematics functions in python are objects which takes some input and produce some output. Many functions are inbuilt in python. Later we will learn to define our own functions. Now let's try the first program in any language is usually printing Hello World! . In python it is very simple and intuitive. print ( \"Hello World!\" ) Hello World!","title":"1. Print Function"},{"location":"day1/#2-defining-variable","text":"In every programming language, we can assign something a value. To define a variable just choose a variable name and assign it to a value using = as follows x = 24 # an integer pi = 3.14 # a float msg = \"Hello World!\" # a string Now we can recall these value by it's variable. Like here msg is assigned to Hello World! . We can print this by simply print ( x ) print ( pi ) print ( msg ) 24 3.14 Hello World! Ex: Choose three variables and assign one as an integer, one as a float and one as a string, and print them. Warning A variable can be assigned multiple times in a program. Only the last value will be printed. name = \"Ram Kumar\" # name is Ram Kumar name = \"Shyam Kumar\" # name is Shyam Kumar print ( name ) Shyam Kumar Tip The line after # got ignored by the python. It is called a comment in any programming language. You can use comment to add some instructions to the code.","title":"2. Defining variable"},{"location":"day1/#3-mathematical-operations","text":"Mathematical operations, i.e., addition, subtraction etc. can be done as 5 + 6 # addition 5 - 6 # subtraction 5 * 6 # multiplication 5 / 6 # division 5 ** 6 # exponent or power Ex: Choose two variable x and y and assign each one as an integer. Try each of the above operations on them like x+y . Finally print them x = 2 y = 3 z = x + y print ( z ) 5","title":"3. Mathematical Operations"},{"location":"day1/#31-mathematical-expression","text":"We can use these operations to evaluate complicated mathematical expressions in python, for example, we can compute f(x) = \\frac{x^2 + 1}{y-1} as follows x = 5 y = 3 z = ( x ** 2 + 1 ) / ( y - 1 ) print ( z ) 13","title":"3.1 Mathematical Expression"},{"location":"day1/#4-references","text":"Official Python Refererence Matplotlib Documentation Basic Math, Mathematical Operators and Python Expressions Gallery Matplotlib","title":"4. References"},{"location":"day10/","text":"DAY 10: Turtle \u00b6 Today we will learn a simple drawing library called turtle . It can draw a shape based on mathematical description.","title":"Day 10: Turtle"},{"location":"day10/#day-10-turtle","text":"Today we will learn a simple drawing library called turtle . It can draw a shape based on mathematical description.","title":"DAY 10: Turtle"},{"location":"day2/","text":"Day 2: Using Libraries and Plotting Functions \u00b6 The agenda of today is to import some external libraries and plot mathematical functions. Day 2: Using Libraries and Plotting Functions 1. Importing Libraries 2. Plotting simple function in python 2.1 Simple Plots 2.2 Adding Attributes in Plots 2.3 Saving Plots 3. More Things to Explore 4. References 1. Importing Libraries \u00b6 To increase the functionality of any language we use libraries or pre written code. A very useful library in python is called numpy which is used to do numerical calculation in python. In order to import a library in python you can use any of the following methods. import numpy # method 1 import numpy as np # method 2 from numpy import * # method 3 Any library has some function or variable included in them. for example numpy library has mathematical sine function as sin and the variable pi . For each method these things can be accessed as follows Method 1: In order to import the function and variable we will do the following import numpy print ( numpy . pi ) # prints the value of pi print ( numpy . sin ( numpy . pi )) # prints the sin(pi) Method 2: In order to import the function and variable we will do the following import numpy as np print ( np . pi ) # prints the value of pi print ( np . sin ( np . pi )) # prints the sin(pi) Method 3: In order to import the function and variable we will do the following from numpy import * print ( pi ) # prints the value of pi print ( sin ( pi )) # prints the sin(pi) Tip Each method has its own advantages and disadvantages but for this course we will use the second method only. 2. Plotting simple function in python \u00b6 To plot simple functions in python we use numpy and matplotlib libraries and three important functions. linspace from numpy The function linspace is used to generate a number of equidistant points on a line inteval. It takes three arguments. linspace(x,y,n) will generate a list of n points between x and y. Ex: Create 100 equally spaced points between -\\pi/2 and \\pi/2. plot from matplotlib.pyplot This is the function used to make a plot. It requires two argument. plot(x,y) will plot list of elements x versus y show from matplotlib.pyplot This function will show the final plot. It is simply invoked by typing show() 2.1 Simple Plots \u00b6 Now we have understood the basic components used to plot a function in python. Now we will see them together in a simple example by plotting the function \\sin(x) between -\\pi to \\pi . # 1. import necessary libraries import numpy as np import matplotlib.pyplot as plt # 2. generate a list of points in the given domain x = np . linspace ( - np . pi , np . pi , 100 ) # 3. apply the function on x y = np . sin ( x ) # 4. plot the y versus x plt . plot ( x , y ) # 5. show the plot plt . show () Ex: Plot the following function in the interval (1,10) \\sin^2(x) + \\cos(x) 2x^2 + 1 2.2 Adding Attributes in Plots \u00b6 The graph shows visual information in a small space in the form of an image. The representation can be improved by adding extra information like title legends and other things. These are called attributes. Modify the attributes of a plot like color, line width, line style by passing additional arguments. plt.plot(x, y, color='blue') this will make the graph blue Add title to a plot using title command. plt.title('Derivative Graph') this will make a title of the graph Incorporate LaTeX style formatting by adding a $ sign before and after the string. plt.plot(x,f(x),label='$f(x)=tan(x^2)$') Label x and y axes using xlabel() and ylabel() commands. plt . xlabel ( 'x values' ) plt . ylabel ( 'y values' ) Add annotations to a plot using annotate() command. Get and set the limits of axes using xlim() and ylim() commands. Tip Try to add one attribute at a time. Use plane english in double/single quotes. Example using all these attributes together: import numpy as np import matplotlib.pyplot as plt x = np . linspace ( - 20 , 20. , 250 ) y = np . sin ( x ) / x plt . plot ( x , y , color = 'red' , linestyle = 'dashed' ) plt . xlabel ( \"$x$-axis\" ) plt . ylabel ( r \"$y = \\frac{\\sin(x)} {x} $\" ) plt . legend ([ r \"$f(x)=\\frac{\\sin(x)} {x} $\" ]) plt . title ( r \"Topologist Sine Curve\" ) plt . show () Ex: Draw a plot of cosine graph between -2\\pi to 2\\pi with line thickness 4 in blue colour. 2.3 Saving Plots \u00b6 In order to save the plot in the local directory we use savefig function. The plot can be saved in the following format. pdf ps png svg eps To save the figure in current working directory use the code. plt . savefig ( \"myplot.png\" ) To save the plot of topologist sine curve I have used the following plt . savefig ( '/Users/ssuman/Downloads/topologist-sine.png' , dpi = 300 , bbox_inches = 'tight' ) 3. More Things to Explore \u00b6 Multiple plots We can plot more than one graphs together as follows import numpy as np import matplotlib.pyplot as plt x = np . linspace ( 0 , 2 * np . pi , 400 ) a = np . sin ( x ) b = np . cos ( x ) c = a + b # plot all the graphs together and labels can # be used to identify them plt . plot ( x , a , label = 'sin(x)' ) plt . plot ( x , b , label = 'cos(x)' ) plt . plot ( x , c , label = 'sin(x)+cos(x)' ) # adding attributes to the plot plt . xlabel ( 'x-axis' , fontsize = 20 ) plt . ylabel ( 'y-axis' , fontsize = 20 ) plt . title ( 'MULTIPLE GRAPH' , fontsize = 40 ) plt . legend () # save and display the graph plt . savefig ( 'multiplegraph.png' ) plt . show () Subplots Subplot is used to plot more than one plots in a bigger plot. 4. References \u00b6 Official Python Refererence Matplotlib Documentation Basic Math, Mathematical Operators and Python Expressions Gallery Matplotlib","title":"Day 2: Libraries"},{"location":"day2/#day-2-using-libraries-and-plotting-functions","text":"The agenda of today is to import some external libraries and plot mathematical functions. Day 2: Using Libraries and Plotting Functions 1. Importing Libraries 2. Plotting simple function in python 2.1 Simple Plots 2.2 Adding Attributes in Plots 2.3 Saving Plots 3. More Things to Explore 4. References","title":"Day 2: Using Libraries and Plotting Functions"},{"location":"day2/#1-importing-libraries","text":"To increase the functionality of any language we use libraries or pre written code. A very useful library in python is called numpy which is used to do numerical calculation in python. In order to import a library in python you can use any of the following methods. import numpy # method 1 import numpy as np # method 2 from numpy import * # method 3 Any library has some function or variable included in them. for example numpy library has mathematical sine function as sin and the variable pi . For each method these things can be accessed as follows Method 1: In order to import the function and variable we will do the following import numpy print ( numpy . pi ) # prints the value of pi print ( numpy . sin ( numpy . pi )) # prints the sin(pi) Method 2: In order to import the function and variable we will do the following import numpy as np print ( np . pi ) # prints the value of pi print ( np . sin ( np . pi )) # prints the sin(pi) Method 3: In order to import the function and variable we will do the following from numpy import * print ( pi ) # prints the value of pi print ( sin ( pi )) # prints the sin(pi) Tip Each method has its own advantages and disadvantages but for this course we will use the second method only.","title":"1. Importing Libraries"},{"location":"day2/#2-plotting-simple-function-in-python","text":"To plot simple functions in python we use numpy and matplotlib libraries and three important functions. linspace from numpy The function linspace is used to generate a number of equidistant points on a line inteval. It takes three arguments. linspace(x,y,n) will generate a list of n points between x and y. Ex: Create 100 equally spaced points between -\\pi/2 and \\pi/2. plot from matplotlib.pyplot This is the function used to make a plot. It requires two argument. plot(x,y) will plot list of elements x versus y show from matplotlib.pyplot This function will show the final plot. It is simply invoked by typing show()","title":"2. Plotting simple function in python"},{"location":"day2/#21-simple-plots","text":"Now we have understood the basic components used to plot a function in python. Now we will see them together in a simple example by plotting the function \\sin(x) between -\\pi to \\pi . # 1. import necessary libraries import numpy as np import matplotlib.pyplot as plt # 2. generate a list of points in the given domain x = np . linspace ( - np . pi , np . pi , 100 ) # 3. apply the function on x y = np . sin ( x ) # 4. plot the y versus x plt . plot ( x , y ) # 5. show the plot plt . show () Ex: Plot the following function in the interval (1,10) \\sin^2(x) + \\cos(x) 2x^2 + 1","title":"2.1 Simple Plots"},{"location":"day2/#22-adding-attributes-in-plots","text":"The graph shows visual information in a small space in the form of an image. The representation can be improved by adding extra information like title legends and other things. These are called attributes. Modify the attributes of a plot like color, line width, line style by passing additional arguments. plt.plot(x, y, color='blue') this will make the graph blue Add title to a plot using title command. plt.title('Derivative Graph') this will make a title of the graph Incorporate LaTeX style formatting by adding a $ sign before and after the string. plt.plot(x,f(x),label='$f(x)=tan(x^2)$') Label x and y axes using xlabel() and ylabel() commands. plt . xlabel ( 'x values' ) plt . ylabel ( 'y values' ) Add annotations to a plot using annotate() command. Get and set the limits of axes using xlim() and ylim() commands. Tip Try to add one attribute at a time. Use plane english in double/single quotes. Example using all these attributes together: import numpy as np import matplotlib.pyplot as plt x = np . linspace ( - 20 , 20. , 250 ) y = np . sin ( x ) / x plt . plot ( x , y , color = 'red' , linestyle = 'dashed' ) plt . xlabel ( \"$x$-axis\" ) plt . ylabel ( r \"$y = \\frac{\\sin(x)} {x} $\" ) plt . legend ([ r \"$f(x)=\\frac{\\sin(x)} {x} $\" ]) plt . title ( r \"Topologist Sine Curve\" ) plt . show () Ex: Draw a plot of cosine graph between -2\\pi to 2\\pi with line thickness 4 in blue colour.","title":"2.2 Adding Attributes in Plots"},{"location":"day2/#23-saving-plots","text":"In order to save the plot in the local directory we use savefig function. The plot can be saved in the following format. pdf ps png svg eps To save the figure in current working directory use the code. plt . savefig ( \"myplot.png\" ) To save the plot of topologist sine curve I have used the following plt . savefig ( '/Users/ssuman/Downloads/topologist-sine.png' , dpi = 300 , bbox_inches = 'tight' )","title":"2.3 Saving Plots"},{"location":"day2/#3-more-things-to-explore","text":"Multiple plots We can plot more than one graphs together as follows import numpy as np import matplotlib.pyplot as plt x = np . linspace ( 0 , 2 * np . pi , 400 ) a = np . sin ( x ) b = np . cos ( x ) c = a + b # plot all the graphs together and labels can # be used to identify them plt . plot ( x , a , label = 'sin(x)' ) plt . plot ( x , b , label = 'cos(x)' ) plt . plot ( x , c , label = 'sin(x)+cos(x)' ) # adding attributes to the plot plt . xlabel ( 'x-axis' , fontsize = 20 ) plt . ylabel ( 'y-axis' , fontsize = 20 ) plt . title ( 'MULTIPLE GRAPH' , fontsize = 40 ) plt . legend () # save and display the graph plt . savefig ( 'multiplegraph.png' ) plt . show () Subplots Subplot is used to plot more than one plots in a bigger plot.","title":"3. More Things to Explore"},{"location":"day2/#4-references","text":"Official Python Refererence Matplotlib Documentation Basic Math, Mathematical Operators and Python Expressions Gallery Matplotlib","title":"4. References"},{"location":"day3/","text":"Day 3: Importing Data and Statistical Plots \u00b6 Today we will learn to import data from external files and plot them. Day 3: Importing Data and Statistical Plots 1. Loading data from files 1.1 Single Column File 1.2 Multi Columns File 1.3 Plotting data 2. Other type of Plots 2.1 Scatter plot 2.2 Bar Graph 2.3 Pie Chart 3. References 1. Loading data from files \u00b6 To load the data from external text or CSV file we have to use loadtxt function from the numpy library. This function will store the column into the lists in python, which can be further processed in the program. 1.1 Single Column File \u00b6 A single comma separated row file can be read as the following. Let primes.txt stores the data consist of first 100 prime numbers separated by comma looks as the following 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541 To read this data and store all the values in a list named primes we use the following command, observe that data is separated by , . import numpy as np # loading primes in list, delimiter is used to separate data primes = np . loadtxt ( \"primes.txt\" , delimiter = ',' ) print ( primes ) [ 2. 3. 5. 7. 11. 13. 17. 19. 23. 29. 31. 37. 41. 43. 47. 53. 59. 61. 67. 71. 73. 79. 83. 89. 97. 101. 103. 107. 109. 113. 127. 131. 137. 139. 149. 151. 157. 163. 167. 173. 179. 181. 191. 193. 197. 199. 211. 223. 227. 229. 233. 239. 241. 251. 257. 263. 269. 271. 277. 281. 283. 293. 307. 311. 313. 317. 331. 337. 347. 349. 353. 359. 367. 373. 379. 383. 389. 397. 401. 409. 419. 421. 431. 433. 439. 443. 449. 457. 461. 463. 467. 479. 487. 491. 499. 503. 509. 521. 523. 541.] Alert The data file primes.txt should be saved in the same folder where the python program is saved. Otherwise you have to provide the full path of the primes.txt . For example if you have downloaded this file in the android mobile then the path will be primes = np . loadtxt ( \"/storage/emulated/0/Download/primes.txt\" , delimiter = \", \" ) In general you can obtain the path from the details or properties of the stored file. Warning The loadtxt function get only the data that can be converted into numbers. To get the data in other types we have to pass the type of data as an optional argument. For example to get data in strings we may use age_group = np . loadtxt ( \"fruits.txt\" , dtype = np . str ) Ex: Download the primes-exercise.txt and try to print the data as above. Ex: Download the statesandut.txt file containing the name of states and union terrotories of India and try to make list of this. 1.2 Multi Columns File \u00b6 Suppose we want to load a marks.csv that consist of two columns with a header as follows Roll No.,Marks 1 ,21 2 ,30 3 ,22 4 ,21 5 ,20 6 ,23 7 ,23 8 ,22 9 ,22 . . . To read each column as a separate list and skipping the first row, we can use the following, import numpy as np # we pass the skiprow=1 to skip the first row roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) print ( roll_no , marks ) [ 1 . 2 . 3 . 4 . 5 . 6 . 7 . 8 . 9 . 10 . 11 . 12 . 13 . 14 . 15 . 16 . 17 . 18 . 19 . 20 . 21 . 22 . 23 . 24 . 25 . 26 . 27 . 28 . 29 . 30 . 31 . 32 . 33 . 34 . 35 . 36 . 37 . 38 . 39 . 40 . 41 . 42 . 43 . 44 . 45 . 46 . 47 . 48 . 49 . 50 . 51 . 52 . 53 . 54 . 55 . 56 . 57 . 58 . 59 . 60 . 61 . 62 . 63 . 64 . 65 . 66 . 67 . 68 . 69 . 70 . 71 . 72 . 73 . 74 . 75 . 76 . 77 . 78 . 79 . 80 . 81 . ] [ 21 . 30 . 22 . 21 . 20 . 23 . 23 . 22 . 22 . 25 . 21 . 23 . 21 . 23 . 24 . 22 . 21 . 23 . 23 . 21 . 28 . 30 . 29 . 27 . 25 . 23 . 25 . 23 . 29 . 22 . 21 . 26 . 30 . 22 . 22 . 20 . 23 . 23 . 23 . 30 . 21 . 22 . 30 . 28 . 28 . 24 . 21 . 24 . 25 . 23 . 24 . 24 . 26 . 23 . 25 . 24 . 28 . 23 . 25 . 20 . 22 . 29 . 26 . 25 . 24 . 24 . 30 . 30 . 24 . 25 . 29 . 28 . 30 . 25 . 27 . 30 . 24 . 30 . 28 . 24 . 30 . ] Tip To skip any number of rows from the top we pass the skiprows as an optional arguments. For example to skip top two rows of the data we can use roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 2 , unpack = True ) To get a particular column we can pass the optional argument userow as follows marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , usecols = ( 1 ), useunpack = True ) 1.3 Plotting data \u00b6 Now we have imported the data from files as lists in python. Now we can plot using plot command, for example, the data from above files can be plotted using the following code import numpy as np import matplotlib.pyplot as plt roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) plt . plot ( roll_no , marks ) plt . xlabel ( \"Roll No.\" ) plt . ylabel ( \"Marks\" ) plt . title ( \"Marks vs Roll No.\" ) plt . show () Tip We can also apply some functions on any list and then plot them. 2. Other type of Plots \u00b6 The default plot join all the points to make a plot which is not relevant all the time. For example joining all the points in the above graph doesn't make it relevant. Here we will see the examples of more types of plot in python. 2.1 Scatter plot \u00b6 In a scatter plot the data is displayed as a collection of points, each point determines the position on x and y axes. To make a scatter plot scatter function is used from the matplotlib.pyplot library. import numpy as np import matplotlib.pyplot as plt roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) plt . scatter ( roll_no , marks , color = 'red' ) plt . xlabel ( \"Roll No.\" ) plt . ylabel ( \"Marks\" ) plt . title ( \"Marks vs Roll No.\" ) plt . show () 2.2 Bar Graph \u00b6 A bar graph is in the python is plotted using the bar function in matplotlib.pyplot library. A simple example of bar graph is the following import numpy as np import matplotlib.pyplot as plt langs = [ 'C' , 'C++' , 'Java' , 'Python' , 'PHP' ] students = [ 23 , 17 , 35 , 29 , 12 ] plt . bar ( langs , students ) plt . xlabel ( \"Programming Language\" ) plt . ylabel ( \"Number of Students\" ) plt . title ( \"Number of Students in each Programming Language\" ) plt . show () A data on csv contains the number of COVID-19 cases according to age groups. Each age groups consist of 10 years. The head of the data looks like this Sno,AgeGroup,TotalCases,Percentage 1 ,0-9,22,3.18% 2 ,10-19,27,3.90% 3 ,20-29,172,24.86% 4 ,30-39,146,21.10% 5 ,40-49,112,16.18% 6 ,50-59,77,11.13% 7 ,60-69,89,12.86% 8 ,70-79,28,4.05% 9 ,> = 80 ,10,1.45% We can use 1 st and 3 rd column of the data to plot the following bar graph. import numpy as np import matplotlib.pyplot as plt # getting the data in lists age_group = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 1 ), unpack = True , dtype = np . str ) positive = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 2 ), unpack = True ) # plotting the bar graph plt . bar ( age_group , positive , color = 'red' ) # adding attributes to the graph plt . xlabel ( \"Age Group\" ) plt . ylabel ( \"Positive CoVid-19 Cases\" ) plt . title ( \"COVID cases in each Age Group\" ) # showing the graph plt . show () 2.3 Pie Chart \u00b6 A pie chart is a circular chart divided into sectors,to illustrate numerical proportion. Pie chart is plotted using pie function from matplotlib.pyplot library. A simple pie chart can be plotted as import numpy as np import matplotlib.pyplot as plt langs = [ 'C' , 'C++' , 'Java' , 'Python' , 'PHP' ] students = [ 23 , 17 , 35 , 29 , 12 ] plt . pie ( students , labels = langs ) plt . show () The COVID-19 example can also be represented in pie chart using the following code. import numpy as np import matplotlib.pyplot as plt age_group = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 1 ), unpack = True , dtype = np . str ) positive = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 2 ), unpack = True ) plt . pie ( positive , labels = age_group ) plt . title ( \"COVID cases in each Age Group\" ) plt . show () Ex: Make a plot of each type using any data of your choice. 3. References \u00b6 Official Docs on Loadtxt Matplotlib Documentation Gallery Matplotlib","title":"Day 3: External Data"},{"location":"day3/#day-3-importing-data-and-statistical-plots","text":"Today we will learn to import data from external files and plot them. Day 3: Importing Data and Statistical Plots 1. Loading data from files 1.1 Single Column File 1.2 Multi Columns File 1.3 Plotting data 2. Other type of Plots 2.1 Scatter plot 2.2 Bar Graph 2.3 Pie Chart 3. References","title":"Day 3: Importing Data and Statistical Plots"},{"location":"day3/#1-loading-data-from-files","text":"To load the data from external text or CSV file we have to use loadtxt function from the numpy library. This function will store the column into the lists in python, which can be further processed in the program.","title":"1. Loading data from files"},{"location":"day3/#11-single-column-file","text":"A single comma separated row file can be read as the following. Let primes.txt stores the data consist of first 100 prime numbers separated by comma looks as the following 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97, 101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199, 211, 223, 227, 229, 233, 239, 241, 251, 257, 263, 269, 271, 277, 281, 283, 293, 307, 311, 313, 317, 331, 337, 347, 349, 353, 359, 367, 373, 379, 383, 389, 397, 401, 409, 419, 421, 431, 433, 439, 443, 449, 457, 461, 463, 467, 479, 487, 491, 499, 503, 509, 521, 523, 541 To read this data and store all the values in a list named primes we use the following command, observe that data is separated by , . import numpy as np # loading primes in list, delimiter is used to separate data primes = np . loadtxt ( \"primes.txt\" , delimiter = ',' ) print ( primes ) [ 2. 3. 5. 7. 11. 13. 17. 19. 23. 29. 31. 37. 41. 43. 47. 53. 59. 61. 67. 71. 73. 79. 83. 89. 97. 101. 103. 107. 109. 113. 127. 131. 137. 139. 149. 151. 157. 163. 167. 173. 179. 181. 191. 193. 197. 199. 211. 223. 227. 229. 233. 239. 241. 251. 257. 263. 269. 271. 277. 281. 283. 293. 307. 311. 313. 317. 331. 337. 347. 349. 353. 359. 367. 373. 379. 383. 389. 397. 401. 409. 419. 421. 431. 433. 439. 443. 449. 457. 461. 463. 467. 479. 487. 491. 499. 503. 509. 521. 523. 541.] Alert The data file primes.txt should be saved in the same folder where the python program is saved. Otherwise you have to provide the full path of the primes.txt . For example if you have downloaded this file in the android mobile then the path will be primes = np . loadtxt ( \"/storage/emulated/0/Download/primes.txt\" , delimiter = \", \" ) In general you can obtain the path from the details or properties of the stored file. Warning The loadtxt function get only the data that can be converted into numbers. To get the data in other types we have to pass the type of data as an optional argument. For example to get data in strings we may use age_group = np . loadtxt ( \"fruits.txt\" , dtype = np . str ) Ex: Download the primes-exercise.txt and try to print the data as above. Ex: Download the statesandut.txt file containing the name of states and union terrotories of India and try to make list of this.","title":"1.1 Single Column File"},{"location":"day3/#12-multi-columns-file","text":"Suppose we want to load a marks.csv that consist of two columns with a header as follows Roll No.,Marks 1 ,21 2 ,30 3 ,22 4 ,21 5 ,20 6 ,23 7 ,23 8 ,22 9 ,22 . . . To read each column as a separate list and skipping the first row, we can use the following, import numpy as np # we pass the skiprow=1 to skip the first row roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) print ( roll_no , marks ) [ 1 . 2 . 3 . 4 . 5 . 6 . 7 . 8 . 9 . 10 . 11 . 12 . 13 . 14 . 15 . 16 . 17 . 18 . 19 . 20 . 21 . 22 . 23 . 24 . 25 . 26 . 27 . 28 . 29 . 30 . 31 . 32 . 33 . 34 . 35 . 36 . 37 . 38 . 39 . 40 . 41 . 42 . 43 . 44 . 45 . 46 . 47 . 48 . 49 . 50 . 51 . 52 . 53 . 54 . 55 . 56 . 57 . 58 . 59 . 60 . 61 . 62 . 63 . 64 . 65 . 66 . 67 . 68 . 69 . 70 . 71 . 72 . 73 . 74 . 75 . 76 . 77 . 78 . 79 . 80 . 81 . ] [ 21 . 30 . 22 . 21 . 20 . 23 . 23 . 22 . 22 . 25 . 21 . 23 . 21 . 23 . 24 . 22 . 21 . 23 . 23 . 21 . 28 . 30 . 29 . 27 . 25 . 23 . 25 . 23 . 29 . 22 . 21 . 26 . 30 . 22 . 22 . 20 . 23 . 23 . 23 . 30 . 21 . 22 . 30 . 28 . 28 . 24 . 21 . 24 . 25 . 23 . 24 . 24 . 26 . 23 . 25 . 24 . 28 . 23 . 25 . 20 . 22 . 29 . 26 . 25 . 24 . 24 . 30 . 30 . 24 . 25 . 29 . 28 . 30 . 25 . 27 . 30 . 24 . 30 . 28 . 24 . 30 . ] Tip To skip any number of rows from the top we pass the skiprows as an optional arguments. For example to skip top two rows of the data we can use roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 2 , unpack = True ) To get a particular column we can pass the optional argument userow as follows marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , usecols = ( 1 ), useunpack = True )","title":"1.2 Multi Columns File"},{"location":"day3/#13-plotting-data","text":"Now we have imported the data from files as lists in python. Now we can plot using plot command, for example, the data from above files can be plotted using the following code import numpy as np import matplotlib.pyplot as plt roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) plt . plot ( roll_no , marks ) plt . xlabel ( \"Roll No.\" ) plt . ylabel ( \"Marks\" ) plt . title ( \"Marks vs Roll No.\" ) plt . show () Tip We can also apply some functions on any list and then plot them.","title":"1.3 Plotting data"},{"location":"day3/#2-other-type-of-plots","text":"The default plot join all the points to make a plot which is not relevant all the time. For example joining all the points in the above graph doesn't make it relevant. Here we will see the examples of more types of plot in python.","title":"2. Other type of Plots"},{"location":"day3/#21-scatter-plot","text":"In a scatter plot the data is displayed as a collection of points, each point determines the position on x and y axes. To make a scatter plot scatter function is used from the matplotlib.pyplot library. import numpy as np import matplotlib.pyplot as plt roll_no , marks = np . loadtxt ( \"marks.csv\" , delimiter = ',' , skiprows = 1 , unpack = True ) plt . scatter ( roll_no , marks , color = 'red' ) plt . xlabel ( \"Roll No.\" ) plt . ylabel ( \"Marks\" ) plt . title ( \"Marks vs Roll No.\" ) plt . show ()","title":"2.1 Scatter plot"},{"location":"day3/#22-bar-graph","text":"A bar graph is in the python is plotted using the bar function in matplotlib.pyplot library. A simple example of bar graph is the following import numpy as np import matplotlib.pyplot as plt langs = [ 'C' , 'C++' , 'Java' , 'Python' , 'PHP' ] students = [ 23 , 17 , 35 , 29 , 12 ] plt . bar ( langs , students ) plt . xlabel ( \"Programming Language\" ) plt . ylabel ( \"Number of Students\" ) plt . title ( \"Number of Students in each Programming Language\" ) plt . show () A data on csv contains the number of COVID-19 cases according to age groups. Each age groups consist of 10 years. The head of the data looks like this Sno,AgeGroup,TotalCases,Percentage 1 ,0-9,22,3.18% 2 ,10-19,27,3.90% 3 ,20-29,172,24.86% 4 ,30-39,146,21.10% 5 ,40-49,112,16.18% 6 ,50-59,77,11.13% 7 ,60-69,89,12.86% 8 ,70-79,28,4.05% 9 ,> = 80 ,10,1.45% We can use 1 st and 3 rd column of the data to plot the following bar graph. import numpy as np import matplotlib.pyplot as plt # getting the data in lists age_group = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 1 ), unpack = True , dtype = np . str ) positive = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 2 ), unpack = True ) # plotting the bar graph plt . bar ( age_group , positive , color = 'red' ) # adding attributes to the graph plt . xlabel ( \"Age Group\" ) plt . ylabel ( \"Positive CoVid-19 Cases\" ) plt . title ( \"COVID cases in each Age Group\" ) # showing the graph plt . show ()","title":"2.2 Bar Graph"},{"location":"day3/#23-pie-chart","text":"A pie chart is a circular chart divided into sectors,to illustrate numerical proportion. Pie chart is plotted using pie function from matplotlib.pyplot library. A simple pie chart can be plotted as import numpy as np import matplotlib.pyplot as plt langs = [ 'C' , 'C++' , 'Java' , 'Python' , 'PHP' ] students = [ 23 , 17 , 35 , 29 , 12 ] plt . pie ( students , labels = langs ) plt . show () The COVID-19 example can also be represented in pie chart using the following code. import numpy as np import matplotlib.pyplot as plt age_group = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 1 ), unpack = True , dtype = np . str ) positive = np . loadtxt ( \"agegroupcovid.csv\" , delimiter = ',' , skiprows = 1 , usecols = ( 2 ), unpack = True ) plt . pie ( positive , labels = age_group ) plt . title ( \"COVID cases in each Age Group\" ) plt . show () Ex: Make a plot of each type using any data of your choice.","title":"2.3 Pie Chart"},{"location":"day3/#3-references","text":"Official Docs on Loadtxt Matplotlib Documentation Gallery Matplotlib","title":"3. References"},{"location":"day4/","text":"Day 4: Lists \u00b6 Day 4: Lists 1. List 1.1 Creating lists 1.2 Accessing data inside list 1.3 Basic list operations 1.4 List as Stack 1.5 Other method on list 1.6 Membership and Iterating of a List 2. References 1. List \u00b6 Till now we are using list to store data and plot them. Now today we will learn about it extensively. List is a data structure, means a way to store and access data. So today we will learn how to store and access data in list data structure. a list is a collection of data in a finite sequence. it can hold values of multiple datatype, i.e., one entry can be integer, other can float or string. 1.1 Creating lists \u00b6 A list is created using a square bracket as follows, a = [] # an empty list b = [ 1 , 2 , 3 , 4 , 5 ] # list of numbers c = [ \"sandeep\" , \"suman\" , 2020 , 7 ] # mix datatypes d = [[ \"sandeep\" , \"suman\" ], 2020 , []] # list inside list print ( c ) [ 'sandeep' , 'suman' , 2020 , 7 ] 1.2 Accessing data inside list \u00b6 Each entry has an index or position in a list, which can be used to access them. As counting starts in python from 0 , So the first index is 0 and second index is 1 and so on. c = [ 'sandeep' , 'suman' , 2020 , 7 ] print ( c [ 0 ]) # to get the 0th element (count with 0) print ( c [ 2 ]) # to get the 2nd element (count with 0) print ( c [ - 1 ]) # count from last sandeep 2020 7 1.3 Basic list operations \u00b6 Length: The length of a list can be computed as follows len ( c ) 4 Addition: Two or more lists can be added with + operation as follows a = [ 1 , 2 ] b = [ \"a\" , \"b\" ] c = a + b print ( c ) [ 1 , 2 , 'a' , 'b' ] Multiplication: Repetition can be achieved with * operation as follows a = [ 'Hi' ] * 5 print ( a ) [ 'Hi' , 'Hi' , 'Hi' , 'Hi' , 'Hi' ] Slicing: A part of of list starting with i index and end before j can be obtained by List[i:j] , for example c = [ \"sandeep\" , \"suman\" , 2020 , 7 ] print ( c [ 1 : 3 ]) [ 'suman' , 2020 ] 1.4 List as Stack \u00b6 Stack is a data structure based on LIFO(Last in first out). Append: The append method on a list will add element in the end of the list. L = [] L . append ( 1 ) # 1 will be added to L L . append ( 2 ) # 2 will be added to L print ( L ) [ 1 , 2 ] Pop: The pop method on list will remove the element from the last. L = [ 1 , 2 ] L . pop () print ( L ) [ 1 ] The method pop also takes addition argument to remove element from any given index. L = [ 1 , 2 ] L . pop ( 0 ) # removes the element with index 0 print ( L ) [ 2 ] 1.5 Other method on list \u00b6 Index: This method is used to get the index of an element. L = [ \"apple\" , \"mango\" , \"orange\" ] i = L . index ( \"mango\" ) print ( i ) 1 Remove: This method is used to remove an element in the list. L = [ \"apple\" , \"mango\" , \"orange\" ] L . remove ( \"mango\" ) print ( L ) [ 'apple' , 'orange' ] Reverse: This method will reverse the elements of the given list. L = [ \"apple\" , \"mango\" , \"orange\" ] L . reverse () print ( L ) [ 'orange' , 'mango' , 'apple' ] Sort: This method is used to sort the elements of a list. L = [ 4 , 6 , 2 , 7 , 1 , 3 ] L . sort () print ( L ) [ 1 , 2 , 3 , 4 , 6 , 7 ] Tip The maximum element of a list can be obtained using sort taking in the last element. i.e., L = [ 4 , 6 , 2 , 7 , 1 , 3 ] L . sort () max = L [ - 1 ] print ( max ) 7 1.6 Membership and Iterating of a List \u00b6 Like the membership in the set. We can tell if something is inside a list or not as follows L = [ \"apple\" , \"mango\" , \"orange\" ] print ( \"apple\" in L ) print ( \"guava\" in L ) True False Often in programming we want look for each element of a list one by one from start to finish. The process is generally known as iteration in programming. A simple program to iterate a list is as follows fruits = [ \"apple\" , \"mango\" , \"orange\" ] for i in fruits : # semicolon is used to make code block print ( i ) # 4 space is used here !important apple mango orange 2. References \u00b6 W3School on List","title":"Day 4: List"},{"location":"day4/#day-4-lists","text":"Day 4: Lists 1. List 1.1 Creating lists 1.2 Accessing data inside list 1.3 Basic list operations 1.4 List as Stack 1.5 Other method on list 1.6 Membership and Iterating of a List 2. References","title":"Day 4: Lists"},{"location":"day4/#1-list","text":"Till now we are using list to store data and plot them. Now today we will learn about it extensively. List is a data structure, means a way to store and access data. So today we will learn how to store and access data in list data structure. a list is a collection of data in a finite sequence. it can hold values of multiple datatype, i.e., one entry can be integer, other can float or string.","title":"1. List"},{"location":"day4/#11-creating-lists","text":"A list is created using a square bracket as follows, a = [] # an empty list b = [ 1 , 2 , 3 , 4 , 5 ] # list of numbers c = [ \"sandeep\" , \"suman\" , 2020 , 7 ] # mix datatypes d = [[ \"sandeep\" , \"suman\" ], 2020 , []] # list inside list print ( c ) [ 'sandeep' , 'suman' , 2020 , 7 ]","title":"1.1 Creating lists"},{"location":"day4/#12-accessing-data-inside-list","text":"Each entry has an index or position in a list, which can be used to access them. As counting starts in python from 0 , So the first index is 0 and second index is 1 and so on. c = [ 'sandeep' , 'suman' , 2020 , 7 ] print ( c [ 0 ]) # to get the 0th element (count with 0) print ( c [ 2 ]) # to get the 2nd element (count with 0) print ( c [ - 1 ]) # count from last sandeep 2020 7","title":"1.2 Accessing data inside list"},{"location":"day4/#13-basic-list-operations","text":"Length: The length of a list can be computed as follows len ( c ) 4 Addition: Two or more lists can be added with + operation as follows a = [ 1 , 2 ] b = [ \"a\" , \"b\" ] c = a + b print ( c ) [ 1 , 2 , 'a' , 'b' ] Multiplication: Repetition can be achieved with * operation as follows a = [ 'Hi' ] * 5 print ( a ) [ 'Hi' , 'Hi' , 'Hi' , 'Hi' , 'Hi' ] Slicing: A part of of list starting with i index and end before j can be obtained by List[i:j] , for example c = [ \"sandeep\" , \"suman\" , 2020 , 7 ] print ( c [ 1 : 3 ]) [ 'suman' , 2020 ]","title":"1.3 Basic list operations"},{"location":"day4/#14-list-as-stack","text":"Stack is a data structure based on LIFO(Last in first out). Append: The append method on a list will add element in the end of the list. L = [] L . append ( 1 ) # 1 will be added to L L . append ( 2 ) # 2 will be added to L print ( L ) [ 1 , 2 ] Pop: The pop method on list will remove the element from the last. L = [ 1 , 2 ] L . pop () print ( L ) [ 1 ] The method pop also takes addition argument to remove element from any given index. L = [ 1 , 2 ] L . pop ( 0 ) # removes the element with index 0 print ( L ) [ 2 ]","title":"1.4 List as Stack"},{"location":"day4/#15-other-method-on-list","text":"Index: This method is used to get the index of an element. L = [ \"apple\" , \"mango\" , \"orange\" ] i = L . index ( \"mango\" ) print ( i ) 1 Remove: This method is used to remove an element in the list. L = [ \"apple\" , \"mango\" , \"orange\" ] L . remove ( \"mango\" ) print ( L ) [ 'apple' , 'orange' ] Reverse: This method will reverse the elements of the given list. L = [ \"apple\" , \"mango\" , \"orange\" ] L . reverse () print ( L ) [ 'orange' , 'mango' , 'apple' ] Sort: This method is used to sort the elements of a list. L = [ 4 , 6 , 2 , 7 , 1 , 3 ] L . sort () print ( L ) [ 1 , 2 , 3 , 4 , 6 , 7 ] Tip The maximum element of a list can be obtained using sort taking in the last element. i.e., L = [ 4 , 6 , 2 , 7 , 1 , 3 ] L . sort () max = L [ - 1 ] print ( max ) 7","title":"1.5 Other method on list"},{"location":"day4/#16-membership-and-iterating-of-a-list","text":"Like the membership in the set. We can tell if something is inside a list or not as follows L = [ \"apple\" , \"mango\" , \"orange\" ] print ( \"apple\" in L ) print ( \"guava\" in L ) True False Often in programming we want look for each element of a list one by one from start to finish. The process is generally known as iteration in programming. A simple program to iterate a list is as follows fruits = [ \"apple\" , \"mango\" , \"orange\" ] for i in fruits : # semicolon is used to make code block print ( i ) # 4 space is used here !important apple mango orange","title":"1.6 Membership and Iterating of a List"},{"location":"day4/#2-references","text":"W3School on List","title":"2. References"},{"location":"day5/","text":"Day 5: Strings \u00b6 Day 5: Strings 1. Strings 1.1 Accessing data inside list 1.2 Basic list operations 1.3 String Methods 1.4 Membership and Iterating a String 2. References 1. Strings \u00b6 String is one the basic datatypes of the python language. There are many ways to define a string but we use the most common method by writing a sentence or paragraph inside single( ' ) or double( \" ) quotes. mystring = \"python is awesome\" mystring = 'python is awesome' print ( mystring ) python is awesome Warning Even numbers in single or double quotes behaves as an string. temp = \"38.7\" print ( type ( temp )) <class 'str' > 1.1 Accessing data inside list \u00b6 String behaves very much similar to the list. You can think that it is a list where each character has as index. We can obtain a character from its position or index. As counting starts in python from 0 , So the first index is 0 and second index is 1 and so on. mystring = \"python is awesome\" fifth = mystring [ 4 ] # fifth character from start last_fifth = mystring [ - 4 ] # fifth character from last print ( fifth , last_fifth ) o s 1.2 Basic list operations \u00b6 Length: The length of a string can be computed as follows print ( len ( mystring )) 17 Addition: Two or more string can be added with + operation as follows a = \"Sandeep \" b = \"Suman\" c = a + b print ( c ) Sandeep Suman Multiplication: Repetition can be achieved with * operation as follows a = 'Hi!' * 5 print ( a ) Hi!Hi!Hi!Hi!Hi! Slicing: A part of of string starting with i index and end before j can be obtained by List[i:j] , for example c = \"sandeep\" print ( c [ 1 : 4 ]) # start from 1st and end before 4th (counting starts with 0) print ( c [ 4 :]) # everything after 4th (counting starts with 0) print ( c [: 4 ]) # to get the substring from start and end before 4th (counting starts with 0) and eep sand Extended Slicing: The slicing in string is more flexible as it accepts more than two arguments. For example X[1:10:2] will get every other item in the substring X[1:10] univ = \"TilkaManjhiBhagalpurUniversity\" s1 = univ [ 1 : 20 : 2 ] # get even position elements in substring univ[1:20] s2 = univ [:: 2 ] # get even position elements s3 = univ [:: - 1 ] # reverse the string print ( s ) ikMnhBaapr TlaajihgluUiest ytisrevinUruplagahBihjnaMakliT 1.3 String Methods \u00b6 Some of the string method is the following Capitalize: This method is used make first letter capital. msg = \"Welcome to FaculTy DevelopMent prograMME.\" print ( msg . capitalize ()) Welcome to faculty development programme. Lower: It will make every letter small. msg = \"Welcome to FaculTy DevelopMent prograMME.\" print ( msg . lower ()) welcome to faculty development programme. Replace: It will one substring with another. msg = \"Welcome to FaculTy DevelopMent prograMME.\" print ( msg . replace ( \"M\" , \"X\" )) # replace all M with X Welcome to FaculTy DevelopXent prograXXE. To replace only one instance, we can pass one more argument. msg = \"Welcome to FaculTy DevelopMent prograMME.\" print ( msg . replace ( \"M\" , \"X\" , 1 )) # replace the first M with X Welcome to FaculTy DevelopXent prograMME. Find: It will find one string in another string. msg = \"Welcome to FaculTy DevelopMent prograMME.\" print ( msg . find ( \"to\" )) # finds the position of \"to\" 8 You can think of this as the following msg = \"Welcome to FaculTy DevelopMent prograMME.\" position = msg . find ( \"to\" ) # position of to original = msg [: 8 ] + \"to\" + msg [ 8 + 2 :] # the original msg print ( original ) Welcome to FaculTy DevelopMent prograMME. Split: The split method will convert a string to list of substring msg = \"Welcome to FaculTy DevelopMent prograMME.\" L = msg . split () # default method will split at each whitespace print ( L ) [ 'Welcome' , 'to' , 'FaculTy' , 'DevelopMent' , 'prograMME.' ] The split method is much more flexible. We can pass an argument to tell about the marker for split. msg = \"Amar,Akbar,Anthony\" L = msg . split ( \",\" ) # split each part with \",\" print ( L ) [ 'Amar' , 'Akbar' , 'Anthony' ] Join: The join method works opposite of split. We can make a string using the split method. L = [ 'Amar' , 'Akbar' , 'Anthony' ] msg = \" \" . join ( L ) # the string in between will go before \".\" print ( msg ) Amar Akbar Anthony If we want to join with , in all the elements of the list. L = [ 'Amar' , 'Akbar' , 'Anthony' ] msg = \",\" . join ( L ) print ( msg ) Amar,Akbar,Anthony Ex: Try to join the list L with comma and space. Ex: Try to join in smaller latter. Tip There are huge number of list methods in python, and python programming is considered to be very powerful in list manipulation. You can google search to do any kind of list manipulation. 1.4 Membership and Iterating a String \u00b6 Membership tells if a string is a part of larger string or not. print ( \"T\" in \"TMBU\" ) print ( \"math\" in \"mathematics\" ) print ( \"ss\" in \"sandeep\" ) True True False The iteration in string work similar to list as follows univ = \"TMBU\" for i in univ : print ( i ) T M B U Ex: Write a program to check if the word 'orange' is present in the \"This is orange juice\". Ex: Convert the date written in the format \"10/06/2020\" to \"10-06-2020\". Ex: Convert \"Tilka MaJHi BHaGalPUR UNIVersiTy\" to \"Tilka Manjhi Bhagalpur University\". 2. References \u00b6 W3School on String","title":"Day 5: String"},{"location":"day5/#day-5-strings","text":"Day 5: Strings 1. Strings 1.1 Accessing data inside list 1.2 Basic list operations 1.3 String Methods 1.4 Membership and Iterating a String 2. References","title":"Day 5: Strings"},{"location":"day5/#1-strings","text":"String is one the basic datatypes of the python language. There are many ways to define a string but we use the most common method by writing a sentence or paragraph inside single( ' ) or double( \" ) quotes. mystring = \"python is awesome\" mystring = 'python is awesome' print ( mystring ) python is awesome Warning Even numbers in single or double quotes behaves as an string. temp = \"38.7\" print ( type ( temp )) <class 'str' >","title":"1. Strings"},{"location":"day5/#11-accessing-data-inside-list","text":"String behaves very much similar to the list. You can think that it is a list where each character has as index. We can obtain a character from its position or index. As counting starts in python from 0 , So the first index is 0 and second index is 1 and so on. mystring = \"python is awesome\" fifth = mystring [ 4 ] # fifth character from start last_fifth = mystring [ - 4 ] # fifth character from last print ( fifth , last_fifth ) o s","title":"1.1 Accessing data inside list"},{"location":"day5/#12-basic-list-operations","text":"Length: The length of a string can be computed as follows print ( len ( mystring )) 17 Addition: Two or more string can be added with + operation as follows a = \"Sandeep \" b = \"Suman\" c = a + b print ( c ) Sandeep Suman Multiplication: Repetition can be achieved with * operation as follows a = 'Hi!' * 5 print ( a ) Hi!Hi!Hi!Hi!Hi! Slicing: A part of of string starting with i index and end before j can be obtained by List[i:j] , for example c = \"sandeep\" print ( c [ 1 : 4 ]) # start from 1st and end before 4th (counting starts with 0) print ( c [ 4 :]) # everything after 4th (counting starts with 0) print ( c [: 4 ]) # to get the substring from start and end before 4th (counting starts with 0) and eep sand Extended Slicing: The slicing in string is more flexible as it accepts more than two arguments. For example X[1:10:2] will get every other item in the substring X[1:10] univ = \"TilkaManjhiBhagalpurUniversity\" s1 = univ [ 1 : 20 : 2 ] # get even position elements in substring univ[1:20] s2 = univ [:: 2 ] # get even position elements s3 = univ [:: - 1 ] # reverse the string print ( s ) ikMnhBaapr TlaajihgluUiest ytisrevinUruplagahBihjnaMakliT","title":"1.2 Basic list operations"},{"location":"day5/#13-string-methods","text":"Some of the string method is the following Capitalize: This method is used make first letter capital. msg = \"Welcome to FaculTy DevelopMent prograMME.\" print ( msg . capitalize ()) Welcome to faculty development programme. Lower: It will make every letter small. msg = \"Welcome to FaculTy DevelopMent prograMME.\" print ( msg . lower ()) welcome to faculty development programme. Replace: It will one substring with another. msg = \"Welcome to FaculTy DevelopMent prograMME.\" print ( msg . replace ( \"M\" , \"X\" )) # replace all M with X Welcome to FaculTy DevelopXent prograXXE. To replace only one instance, we can pass one more argument. msg = \"Welcome to FaculTy DevelopMent prograMME.\" print ( msg . replace ( \"M\" , \"X\" , 1 )) # replace the first M with X Welcome to FaculTy DevelopXent prograMME. Find: It will find one string in another string. msg = \"Welcome to FaculTy DevelopMent prograMME.\" print ( msg . find ( \"to\" )) # finds the position of \"to\" 8 You can think of this as the following msg = \"Welcome to FaculTy DevelopMent prograMME.\" position = msg . find ( \"to\" ) # position of to original = msg [: 8 ] + \"to\" + msg [ 8 + 2 :] # the original msg print ( original ) Welcome to FaculTy DevelopMent prograMME. Split: The split method will convert a string to list of substring msg = \"Welcome to FaculTy DevelopMent prograMME.\" L = msg . split () # default method will split at each whitespace print ( L ) [ 'Welcome' , 'to' , 'FaculTy' , 'DevelopMent' , 'prograMME.' ] The split method is much more flexible. We can pass an argument to tell about the marker for split. msg = \"Amar,Akbar,Anthony\" L = msg . split ( \",\" ) # split each part with \",\" print ( L ) [ 'Amar' , 'Akbar' , 'Anthony' ] Join: The join method works opposite of split. We can make a string using the split method. L = [ 'Amar' , 'Akbar' , 'Anthony' ] msg = \" \" . join ( L ) # the string in between will go before \".\" print ( msg ) Amar Akbar Anthony If we want to join with , in all the elements of the list. L = [ 'Amar' , 'Akbar' , 'Anthony' ] msg = \",\" . join ( L ) print ( msg ) Amar,Akbar,Anthony Ex: Try to join the list L with comma and space. Ex: Try to join in smaller latter. Tip There are huge number of list methods in python, and python programming is considered to be very powerful in list manipulation. You can google search to do any kind of list manipulation.","title":"1.3 String Methods"},{"location":"day5/#14-membership-and-iterating-a-string","text":"Membership tells if a string is a part of larger string or not. print ( \"T\" in \"TMBU\" ) print ( \"math\" in \"mathematics\" ) print ( \"ss\" in \"sandeep\" ) True True False The iteration in string work similar to list as follows univ = \"TMBU\" for i in univ : print ( i ) T M B U Ex: Write a program to check if the word 'orange' is present in the \"This is orange juice\". Ex: Convert the date written in the format \"10/06/2020\" to \"10-06-2020\". Ex: Convert \"Tilka MaJHi BHaGalPUR UNIVersiTy\" to \"Tilka Manjhi Bhagalpur University\".","title":"1.4 Membership and Iterating a String"},{"location":"day5/#2-references","text":"W3School on String","title":"2. References"},{"location":"day6/","text":"Day 6: Vector and Matrices \u00b6 Today we will learn about two important data types of numpy library which is similar to vectors and matrices. Array and matrices stores data similar to lists but they suitable for mathematical operations like dot product and matrix multiplication. Day 6: Vector and Matrices 1. Array 1.1 Importing array 1.2 Creating Array elements 1.3 Accessing elements of array 1.4 Basic Array operations 1.5 Method on array 1.6 Looping through an array 2. Matrices in Python 2.1 Nested List 2.2 Numpy Arrays 2.2.1 Operation on matrices 2.3 Numpy Matrices 2.3.1 creating a matrix from a string 2.3.2 Operations on Numpy Matrices 3. References 1. Array \u00b6 Here we will learn about array which is similar to vectors in mathematics. 1.1 Importing array \u00b6 Similar to other python library we can import array as the following methods import array import array as arr from array import * Note We will use only the second method in this course. 1.2 Creating Array elements \u00b6 To make an array in python we use the following functions. import array as arr a = arr . array ( 'd' ,[ 1 , 2 , 3 , 4 , 5 ]) print ( a ) This will create a array with variable a contains five elements 1 to 5. Here d denote the data type of float. For other datatype you can use the following table. Code C Type Python Type Min bytes b signed char int 1 B unsigned char int 1 u Py_UNICODE Unicode 2 h signed short int 2 H unsigned short int 2 i signed int int 2 I unsigned int int 2 l signed long int 4 L unsigned long int 4 f float float 4 d double float 8 Tip You can convert any list of number to an array simply using d as in above code. 1.3 Accessing elements of array \u00b6 Element: To access the an element of the array a , we use the following command import array as arr a = arr . array ( 'd' ,[ 1 , 2 , 3 , 4 , 5 ]) print ( a [ 2 ]) # counting starts with 0 print ( a [ - 2 ]) # count from last 3 4 Slicing: Similar to the list and strings we can obtain a continuous part of an array import array as arr a = arr . array ( 'd' , [ 6.8 , 5.9 , 9.8 , 2.4 , 3.3 ]) print ( a [ 1 : 3 ]) # prints the part of array start with index 1 and end before 3 array ( 'd' , [ 5 .9, 9 .8 ]) 1.4 Basic Array operations \u00b6 len: Length of an array can be computed using len function as follows import array as arr a = arr . array ( 'd' ,[ 1 , 2 , 3 , 4 , 5 ]) print ( len ( a )) # prints length of array a 5 Concatenation: We can join two array with + operation. import array as arr a = arr . array ( 'd' ,[ 1.2 , 5.8 , 6.4 ]) b = arr . array ( 'd' ,[ 1.3 , 6 ]) c = a + b # array c will have elements of a and b print ( c ) Array c = array ( 'd' , [ 1 .2, 5 .8, 6 .4, 1 .3, 6 .0 ]) 1.5 Method on array \u00b6 append: Similar to the list the append is used to add a single element at the end of an array. import array as arr a = arr . array ( 'd' ,[ 1 , 2 , 3 , 4 , 5 ]) a . append ( 23 ) # appends 23 at the end of array a print ( a ) array ( 'd' , [ 1 .0, 2 .0, 3 .0, 4 .0, 5 .0, 23 .0 ]) extend: It is used when you want to add more than one element at the end of an array. import array as arr a = arr . array ( 'd' ,[ 4 , 5 ]) a . extend ([ 23 , 4.15 , 6.7 ]) # extend array a using list print ( a ) b = arr . array ( 'd' ,[ 23 , 4.15 , 6.7 ]) a . extend ( b ) # extend array a using another array b print ( a ) array ( 'd' , [ 4 .0, 5 .0, 23 .0, 4 .15, 6 .7 ]) array ( 'd' , [ 4 .0, 5 .0, 23 .0, 4 .15, 6 .7, 23 .0, 4 .15, 6 .7 ]) insert: - used when you want to add an element at a specific position in an array. import array as arr a = arr . array ( 'd' ,[ 1.2 , 2 , 3.14 , 4 , 5 ]) a . insert ( 1 , 2.73 ) # insert 2.73 at position 1 (count with 0) print ( a ) array ( 'd' , [ 1 .2, 2 .73, 2 .0, 3 .14, 4 .0, 5 .0 ]) pop: It is used when you want to remove an element and return it. We can provide optional argument to remove an element with given index. import array as arr a = arr . array ( 'd' , [ 4 , 3 , 5 , 6.7 , 3.5 ]) print ( a . pop ()) # remove the last element print ( a . pop ( 1 )) # remove index 1 element (count with 0) print ( a ) 3 .5 3 .0 array ( 'd' , [ 4 .0, 5 .0, 6 .7 ]) remove: : It is used when you want to remove an element with a specific value without returning it. import array as arr a = arr . array ( 'd' , [ 4 , 3 , 5 , 6.7 , 3.5 ]) print ( a . remove ( 5 )) # remove element 5, but produce no output print ( a ) # prints array a after removing element 5 None array ( 'd' , [ 4 .0, 3 .0, 6 .7, 3 .5 ]) 1.6 Looping through an array \u00b6 Similar to list and string we can use for loops or while loops to go through each elements of a list one by one. for To iterates over the items of an array specified we can use for as follows import array as arr a = arr . array ( 'd' , [ 6.8 , 5.9 , 9.8 , 2.4 , 3.3 ]) for i in a : # you can use each element on your desire print ( i ** 2 ) # printing square of each element 46 .239999999999995 34 .81 96 .04000000000002 5 .76 10 .889999999999999 2. Matrices in Python \u00b6 Matrices in python can be achieved using one of the following ways Nested Lists Numpy Arrays Numpy Matrices Now we will learn them one by one 2.1 Nested List \u00b6 We can used nested list to store data similar to matrices. matrix = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]] print ( matrix ) [[ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ]] Warning Nested list doesn't work similar to matrices in mathematics. They are simply table and operations are limited by list functions. 2.2 Numpy Arrays \u00b6 Similar to nested list, we can use array inside array to store data in matrices. import numpy as np a = np . array ([[ 1.2 , 2.1 ],[ 3.6 , 4.3 ]]) print ( a ) [[ 1 .2 2 .1 ] [ 3 .6 4 .3 ]] 2.2.1 Operation on matrices \u00b6 Addition: We use + to achieve addition of similar size matrices. import numpy as np a = np . array ([[ 1 , 2 ], [ 3 , 4 ]]) b = np . array ([[ 10 , 20 ], [ 30 , 40 ]]) print ( a + b ) [[ 11 22 ] [ 33 44 ]] Matrix multiplication: We use * to achieve addition of similar size matrices. import numpy as np a = np . array ([[ 1 , 2 ], [ 3 , 4 ]]) b = np . array ([[ 10 , 20 ], [ 30 , 40 ]]) print ( a * b ) [[ 10 40 ] [ 90 160 ]] Transpose: We can transpose a matrix using the transpose function of numpy library. import numpy as np a = np . array ([[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]]) print ( a ) print ( np . transpose ( a )) [[ 1 2 3 ] [ 4 5 6 ]] [[ 1 4 ] [ 2 5 ] [ 3 6 ]] 2.3 Numpy Matrices \u00b6 Numpy matrix is a class in nunpy library to handle matrices and mathematical operations related to them. 2.3.1 creating a matrix from a string \u00b6 The main advantage of this class is that it has flexible method of creating matrices and slicing them. import numpy as np a = np . matrix ( \"1, 2; 3, 4\" ) b = np . matrix ([[ 10 , 20 ],[ 30 , 40 ]]) print ( a ) print ( b ) [[ 1 2 ] [ 3 4 ]] [[ 10 20 ] [ 30 40 ]] 2.3.2 Operations on Numpy Matrices \u00b6 The operation on numpy matrices are similar to the matrices we make using numpy arrays. 3. References \u00b6 W3School on Numpy Array Numpy Matrices on Tutorials Point","title":"Day 6: Vectors"},{"location":"day6/#day-6-vector-and-matrices","text":"Today we will learn about two important data types of numpy library which is similar to vectors and matrices. Array and matrices stores data similar to lists but they suitable for mathematical operations like dot product and matrix multiplication. Day 6: Vector and Matrices 1. Array 1.1 Importing array 1.2 Creating Array elements 1.3 Accessing elements of array 1.4 Basic Array operations 1.5 Method on array 1.6 Looping through an array 2. Matrices in Python 2.1 Nested List 2.2 Numpy Arrays 2.2.1 Operation on matrices 2.3 Numpy Matrices 2.3.1 creating a matrix from a string 2.3.2 Operations on Numpy Matrices 3. References","title":"Day 6: Vector and Matrices"},{"location":"day6/#1-array","text":"Here we will learn about array which is similar to vectors in mathematics.","title":"1. Array"},{"location":"day6/#11-importing-array","text":"Similar to other python library we can import array as the following methods import array import array as arr from array import * Note We will use only the second method in this course.","title":"1.1 Importing array"},{"location":"day6/#12-creating-array-elements","text":"To make an array in python we use the following functions. import array as arr a = arr . array ( 'd' ,[ 1 , 2 , 3 , 4 , 5 ]) print ( a ) This will create a array with variable a contains five elements 1 to 5. Here d denote the data type of float. For other datatype you can use the following table. Code C Type Python Type Min bytes b signed char int 1 B unsigned char int 1 u Py_UNICODE Unicode 2 h signed short int 2 H unsigned short int 2 i signed int int 2 I unsigned int int 2 l signed long int 4 L unsigned long int 4 f float float 4 d double float 8 Tip You can convert any list of number to an array simply using d as in above code.","title":"1.2 Creating Array elements"},{"location":"day6/#13-accessing-elements-of-array","text":"Element: To access the an element of the array a , we use the following command import array as arr a = arr . array ( 'd' ,[ 1 , 2 , 3 , 4 , 5 ]) print ( a [ 2 ]) # counting starts with 0 print ( a [ - 2 ]) # count from last 3 4 Slicing: Similar to the list and strings we can obtain a continuous part of an array import array as arr a = arr . array ( 'd' , [ 6.8 , 5.9 , 9.8 , 2.4 , 3.3 ]) print ( a [ 1 : 3 ]) # prints the part of array start with index 1 and end before 3 array ( 'd' , [ 5 .9, 9 .8 ])","title":"1.3 Accessing elements of array"},{"location":"day6/#14-basic-array-operations","text":"len: Length of an array can be computed using len function as follows import array as arr a = arr . array ( 'd' ,[ 1 , 2 , 3 , 4 , 5 ]) print ( len ( a )) # prints length of array a 5 Concatenation: We can join two array with + operation. import array as arr a = arr . array ( 'd' ,[ 1.2 , 5.8 , 6.4 ]) b = arr . array ( 'd' ,[ 1.3 , 6 ]) c = a + b # array c will have elements of a and b print ( c ) Array c = array ( 'd' , [ 1 .2, 5 .8, 6 .4, 1 .3, 6 .0 ])","title":"1.4 Basic Array operations"},{"location":"day6/#15-method-on-array","text":"append: Similar to the list the append is used to add a single element at the end of an array. import array as arr a = arr . array ( 'd' ,[ 1 , 2 , 3 , 4 , 5 ]) a . append ( 23 ) # appends 23 at the end of array a print ( a ) array ( 'd' , [ 1 .0, 2 .0, 3 .0, 4 .0, 5 .0, 23 .0 ]) extend: It is used when you want to add more than one element at the end of an array. import array as arr a = arr . array ( 'd' ,[ 4 , 5 ]) a . extend ([ 23 , 4.15 , 6.7 ]) # extend array a using list print ( a ) b = arr . array ( 'd' ,[ 23 , 4.15 , 6.7 ]) a . extend ( b ) # extend array a using another array b print ( a ) array ( 'd' , [ 4 .0, 5 .0, 23 .0, 4 .15, 6 .7 ]) array ( 'd' , [ 4 .0, 5 .0, 23 .0, 4 .15, 6 .7, 23 .0, 4 .15, 6 .7 ]) insert: - used when you want to add an element at a specific position in an array. import array as arr a = arr . array ( 'd' ,[ 1.2 , 2 , 3.14 , 4 , 5 ]) a . insert ( 1 , 2.73 ) # insert 2.73 at position 1 (count with 0) print ( a ) array ( 'd' , [ 1 .2, 2 .73, 2 .0, 3 .14, 4 .0, 5 .0 ]) pop: It is used when you want to remove an element and return it. We can provide optional argument to remove an element with given index. import array as arr a = arr . array ( 'd' , [ 4 , 3 , 5 , 6.7 , 3.5 ]) print ( a . pop ()) # remove the last element print ( a . pop ( 1 )) # remove index 1 element (count with 0) print ( a ) 3 .5 3 .0 array ( 'd' , [ 4 .0, 5 .0, 6 .7 ]) remove: : It is used when you want to remove an element with a specific value without returning it. import array as arr a = arr . array ( 'd' , [ 4 , 3 , 5 , 6.7 , 3.5 ]) print ( a . remove ( 5 )) # remove element 5, but produce no output print ( a ) # prints array a after removing element 5 None array ( 'd' , [ 4 .0, 3 .0, 6 .7, 3 .5 ])","title":"1.5 Method on array"},{"location":"day6/#16-looping-through-an-array","text":"Similar to list and string we can use for loops or while loops to go through each elements of a list one by one. for To iterates over the items of an array specified we can use for as follows import array as arr a = arr . array ( 'd' , [ 6.8 , 5.9 , 9.8 , 2.4 , 3.3 ]) for i in a : # you can use each element on your desire print ( i ** 2 ) # printing square of each element 46 .239999999999995 34 .81 96 .04000000000002 5 .76 10 .889999999999999","title":"1.6 Looping through an array"},{"location":"day6/#2-matrices-in-python","text":"Matrices in python can be achieved using one of the following ways Nested Lists Numpy Arrays Numpy Matrices Now we will learn them one by one","title":"2. Matrices in Python"},{"location":"day6/#21-nested-list","text":"We can used nested list to store data similar to matrices. matrix = [[ 1 , 2 , 3 ], [ 4 , 5 , 6 ], [ 7 , 8 , 9 ]] print ( matrix ) [[ 1 , 2 , 3 ] , [ 4 , 5 , 6 ] , [ 7 , 8 , 9 ]] Warning Nested list doesn't work similar to matrices in mathematics. They are simply table and operations are limited by list functions.","title":"2.1 Nested List"},{"location":"day6/#22-numpy-arrays","text":"Similar to nested list, we can use array inside array to store data in matrices. import numpy as np a = np . array ([[ 1.2 , 2.1 ],[ 3.6 , 4.3 ]]) print ( a ) [[ 1 .2 2 .1 ] [ 3 .6 4 .3 ]]","title":"2.2 Numpy Arrays"},{"location":"day6/#221-operation-on-matrices","text":"Addition: We use + to achieve addition of similar size matrices. import numpy as np a = np . array ([[ 1 , 2 ], [ 3 , 4 ]]) b = np . array ([[ 10 , 20 ], [ 30 , 40 ]]) print ( a + b ) [[ 11 22 ] [ 33 44 ]] Matrix multiplication: We use * to achieve addition of similar size matrices. import numpy as np a = np . array ([[ 1 , 2 ], [ 3 , 4 ]]) b = np . array ([[ 10 , 20 ], [ 30 , 40 ]]) print ( a * b ) [[ 10 40 ] [ 90 160 ]] Transpose: We can transpose a matrix using the transpose function of numpy library. import numpy as np a = np . array ([[ 1 , 2 , 3 ],[ 4 , 5 , 6 ]]) print ( a ) print ( np . transpose ( a )) [[ 1 2 3 ] [ 4 5 6 ]] [[ 1 4 ] [ 2 5 ] [ 3 6 ]]","title":"2.2.1 Operation on matrices"},{"location":"day6/#23-numpy-matrices","text":"Numpy matrix is a class in nunpy library to handle matrices and mathematical operations related to them.","title":"2.3 Numpy Matrices"},{"location":"day6/#231-creating-a-matrix-from-a-string","text":"The main advantage of this class is that it has flexible method of creating matrices and slicing them. import numpy as np a = np . matrix ( \"1, 2; 3, 4\" ) b = np . matrix ([[ 10 , 20 ],[ 30 , 40 ]]) print ( a ) print ( b ) [[ 1 2 ] [ 3 4 ]] [[ 10 20 ] [ 30 40 ]]","title":"2.3.1 creating a matrix from a string"},{"location":"day6/#232-operations-on-numpy-matrices","text":"The operation on numpy matrices are similar to the matrices we make using numpy arrays.","title":"2.3.2 Operations on Numpy Matrices"},{"location":"day6/#3-references","text":"W3School on Numpy Array Numpy Matrices on Tutorials Point","title":"3. References"},{"location":"day7/","text":"DAY 7: Conditional Statements \u00b6 Today we will learn about control structure and loops. Control structure and loops are fundamental concept in programming. Hence they are implemented in every programming language. Actually these concepts make a programming language different from calculators. DAY 7: Conditional Statements 1. Boolean 1.1 Assigning Boolean Data 1.2 Boolean Operations 2. Conditional Statements 2.1 General Structure 2.2 Implementation 3. References 1. Boolean \u00b6 Since we have seen that control structure depends on test . Test is nothing but a statement in python whose value is either True or False but not together. For this we have a data type in python to represent this, known as boolean data type. 1.1 Assigning Boolean Data \u00b6 test1 = True test2 = False print ( test1 ) print ( test2 ) True False Many relational operation result in boolean in pyton. For example if we ask following questions? test1 = 5 >= 0 # True test2 = 5 < 0 # False test3 = 6 == 3 # False test4 = ( 6 / 2 == 3 ) # Ture, use bracket for better looks print ( test1 ) print ( test2 ) print ( test3 ) print ( test4 ) True False False True We can also check some variable has a particular value or not using this idea. f_name = \"Sandeep\" l_name = \"Suman\" full_name = f_name + \" \" + l_name test1 = ( full_name == \"Sandeep Suman\" ) print ( test1 ) True 1.2 Boolean Operations \u00b6 Boolean data has three main operation. Others are combination of them not: It interchange the value of boolean between True and False . or: It takes the logical or operation between two boolean statements. and: It takes the logical and operation between two boolean statements. The result can be summarized in a table as follows A B not A not B A == B A =! B A or B A and B T F F T F T T F F T T F F T T F T T F F T F T T F F T T T F F F f_name = \"Sandeep\" l_name = \"Suman\" full_name = f_name + \" \" + l_name test1 = ( full_name == \"Sandeep Suman\" ) # True test2 = not test1 # not True = False test3 = ( full_name == \"Sandeep Suman\" ) or ( 5 <= 0 ) # True OR False = True test4 = ( full_name == \"Sandeep Suman\" ) and ( 5 <= 0 ) # True AND False = False print ( test1 ) print ( test2 ) print ( test3 ) print ( test4 ) True False True False 2. Conditional Statements \u00b6 Till now all the lines of a program run one by one. The control structure will enable us to run a line based on a test . 2.1 General Structure \u00b6 The structure of general control struructure in python(or in any programming language) will look like the following: if < test1 > : < statement1 > elif < test2 > : < statement2 > . . . else : < final statement > The situation can graphically represented as the following diagram If we look at another perspective we can think this as the following sequnce of tests When the i-th test fails, then program check for (i+1)-th test and so on. If any test say k-th one will pass then the program will run the k-th statement will run and program will exit this control structure. If all the statement fails the program will run the final statement nested under else . 2.2 Implementation \u00b6 Except the first if statement all other are optional. We can combine as many test as we want. One Test: The smallest possible program with if statement can written as following number = 77 if number > 60 : # colon represent a block in python print ( \"1st Devision\" ) # each block need to be indented by 4 whitespace 1st Devision The output is expected. But even if the number \\leq 60 , we will not get any output because the code has no else statement. number = 55 if number > 60 : print ( \"1st Division\" ) If...else: We can combine else to catch the program when test fails as follows number = 55 if number > 60 : print ( \"1st Division\" ) else : print ( \"Not 1st Division\" ) Not 1st Division Elif: More than one test can be used using elif statement. number = 37 if number >= 60 : print ( \"1st Division\" ) elif number >= 45 : print ( \"2nd Division\" ) elif number >= 35 : print ( \"Third Division\" ) else : print ( \"Fail\" ) Third Division Ex: Change the number to get each type of output. Ex: Write a program that will give the grade of a student based on marks. You can use any criteria for grade. 3. References \u00b6 W3School on If Statements","title":"Day 7: Conditional"},{"location":"day7/#day-7-conditional-statements","text":"Today we will learn about control structure and loops. Control structure and loops are fundamental concept in programming. Hence they are implemented in every programming language. Actually these concepts make a programming language different from calculators. DAY 7: Conditional Statements 1. Boolean 1.1 Assigning Boolean Data 1.2 Boolean Operations 2. Conditional Statements 2.1 General Structure 2.2 Implementation 3. References","title":"DAY 7: Conditional Statements"},{"location":"day7/#1-boolean","text":"Since we have seen that control structure depends on test . Test is nothing but a statement in python whose value is either True or False but not together. For this we have a data type in python to represent this, known as boolean data type.","title":"1. Boolean"},{"location":"day7/#11-assigning-boolean-data","text":"test1 = True test2 = False print ( test1 ) print ( test2 ) True False Many relational operation result in boolean in pyton. For example if we ask following questions? test1 = 5 >= 0 # True test2 = 5 < 0 # False test3 = 6 == 3 # False test4 = ( 6 / 2 == 3 ) # Ture, use bracket for better looks print ( test1 ) print ( test2 ) print ( test3 ) print ( test4 ) True False False True We can also check some variable has a particular value or not using this idea. f_name = \"Sandeep\" l_name = \"Suman\" full_name = f_name + \" \" + l_name test1 = ( full_name == \"Sandeep Suman\" ) print ( test1 ) True","title":"1.1 Assigning Boolean Data"},{"location":"day7/#12-boolean-operations","text":"Boolean data has three main operation. Others are combination of them not: It interchange the value of boolean between True and False . or: It takes the logical or operation between two boolean statements. and: It takes the logical and operation between two boolean statements. The result can be summarized in a table as follows A B not A not B A == B A =! B A or B A and B T F F T F T T F F T T F F T T F T T F F T F T T F F T T T F F F f_name = \"Sandeep\" l_name = \"Suman\" full_name = f_name + \" \" + l_name test1 = ( full_name == \"Sandeep Suman\" ) # True test2 = not test1 # not True = False test3 = ( full_name == \"Sandeep Suman\" ) or ( 5 <= 0 ) # True OR False = True test4 = ( full_name == \"Sandeep Suman\" ) and ( 5 <= 0 ) # True AND False = False print ( test1 ) print ( test2 ) print ( test3 ) print ( test4 ) True False True False","title":"1.2 Boolean Operations"},{"location":"day7/#2-conditional-statements","text":"Till now all the lines of a program run one by one. The control structure will enable us to run a line based on a test .","title":"2. Conditional Statements"},{"location":"day7/#21-general-structure","text":"The structure of general control struructure in python(or in any programming language) will look like the following: if < test1 > : < statement1 > elif < test2 > : < statement2 > . . . else : < final statement > The situation can graphically represented as the following diagram If we look at another perspective we can think this as the following sequnce of tests When the i-th test fails, then program check for (i+1)-th test and so on. If any test say k-th one will pass then the program will run the k-th statement will run and program will exit this control structure. If all the statement fails the program will run the final statement nested under else .","title":"2.1 General Structure"},{"location":"day7/#22-implementation","text":"Except the first if statement all other are optional. We can combine as many test as we want. One Test: The smallest possible program with if statement can written as following number = 77 if number > 60 : # colon represent a block in python print ( \"1st Devision\" ) # each block need to be indented by 4 whitespace 1st Devision The output is expected. But even if the number \\leq 60 , we will not get any output because the code has no else statement. number = 55 if number > 60 : print ( \"1st Division\" ) If...else: We can combine else to catch the program when test fails as follows number = 55 if number > 60 : print ( \"1st Division\" ) else : print ( \"Not 1st Division\" ) Not 1st Division Elif: More than one test can be used using elif statement. number = 37 if number >= 60 : print ( \"1st Division\" ) elif number >= 45 : print ( \"2nd Division\" ) elif number >= 35 : print ( \"Third Division\" ) else : print ( \"Fail\" ) Third Division Ex: Change the number to get each type of output. Ex: Write a program that will give the grade of a student based on marks. You can use any criteria for grade.","title":"2.2 Implementation"},{"location":"day7/#3-references","text":"W3School on If Statements","title":"3. References"},{"location":"day8/","text":"DAY 8: Loops \u00b6 Today we will learn about control structure and loops. Control structure and loops are fundamental concept in programming. Hence they are implemented in every programming language. Actually these concepts make a programming language different from calculators. DAY 8: Loops 1. Loops 1.1 While loop 1.2 For Loop 1.2.1 Conditionally Controlling the loop 1.3 Range Function 2. References 1. Loops \u00b6 Loops are used to run a block of code again and again based on some condition. There are two kinds of loops most programming language have. While Loop For Loops 1.1 While loop \u00b6 In python while loop is used to run a block of code again and again till a test is true. A simple example of such code is the following. i = 1 while i < 6 : # code in this block run repeatedly print ( i ) i += 1 >>> 1 2 3 4 5 1.2 For Loop \u00b6 A for loop in python is used to iterate over a sequence (list ,tuple, string) or other iterable objects. A simple for loop to print each element of the following numbers = [ 6 , 5 , 3 , 8 , 4 , 2 , 5 ] # given list for iteration for val in numbers : # this code block will run for print ( val ) # each element of iterable 6 5 3 8 4 2 5 A common situation in which for loop is used to store the value of a computation for each element of a list. Suppose we want to find sum of each element of a list, then we can write the following code. numbers = [ 6 , 5 , 3 , 8 , 4 , 2 , 5 ] # given iterable sum = 0 # final value will be stored in sum for val in numbers : # this code will run each element of list sum = sum + val # we add each element in our sum variable # after leaving for loop look at indentation print ( sum ) # finally print the sum 33 1.2.1 Conditionally Controlling the loop \u00b6 The for loop does not require any test to be performed in the code. But these are three important cases where for is used with a condition. break: It will terminates the loop based on a test . A common use case is suppose you want to search for some property of element of a list. Then we will break the loop once the condition is met. For example suppose we are looking for number 5 in the given list of numbers. numbers = [ 6 , 5 , 3 , 8 , 4 , 2 , 5 ] # given iterable for val in numbers : # this code will run each element of list if val == 3 : # the for loop will run until this test is satisfied break print ( val ) 6 5 Important You can see that the code will run until the test is satisfied for the first time. continue: It is used to skip the rest of the code inside a loop for the current iteration only. Loop does not terminate but continues on with the next iteration. A common situation is suppose we want to print odd integers only in a given list, then we can skip a code block for even integer as follows numbers = [ 6 , 5 , 3 , 8 , 4 , 2 , 5 ] # given iterable for val in numbers : # this code will run each element of list if val % 2 == 0 : # checks for even value and continue # leave the current iteration print ( val ) 5 3 5 pass: It is a null statement. The statements results into no operation. when it is executed,nothing happens. It is useful as a placeholder,when a statement is required syntactically,but no codes need to be executed. For example we can achieve the above task with the following code with pass . numbers = [ 6 , 5 , 3 , 8 , 4 , 2 , 5 ] # given iterable for val in numbers : # this code will run each element of list if val % 2 == 0 : # checks for even value and pass # leave the current iteration else : print ( val ) 5 3 5 1.3 Range Function \u00b6 In loops, range is used to control how many times the loop will be repeated. It is used to generate a finite sequence of natural numbers based on three arguments. First and last argument is optional. The range function looks like range ( start , stop , step ) start states the integer value at which the sequence begins, if this is not included then start begins at 0 stop is always required and is the integer that is counted up to but not included step sets how much to increase (or decrease in the case of negative numbers) the next iteration, if this is omitted then step defaults to 1 So the range function can be used in three different ways Using Stop Only: We can use the range as only one argument as a positive natural number say n . It will make a iterable of n natural numbers starting with 0 . For example for i in range ( 5 ): print ( i ) 0 1 2 3 4 Using start and stop: We can use range function with two arguments start and stop . It will create a iterable of stop - start natural numbers with start . For example for i in range ( 5 , 10 ): # create iterable start with print ( i ) # 5 of length 10 - 5 = 5 5 6 7 8 9 Using start, stop and step: When all three arguments used, it generate a iterable that will began with natural number start to stop - 1 with a step . For example for i in range ( 1 , 20 , 3 ): print ( i ) 1 4 7 10 13 16 19 Warning The range doesn't make a list. i.e., if you run this code the output will not be a sequence. sequence = range ( 1 , 20 , 3 ) print ( sequence ) range ( 1 , 20 , 3 ) In order to get the list. You have to pass this iterable in list function. sequence = range ( 1 , 20 , 3 ) list_sequence = list ( sequence ) print ( list_sequence ) [ 1 , 4 , 7 , 10 , 13 , 16 , 19 ] 2. References \u00b6 W3School on While Loop W3School on For Loop","title":"Day 8: Loops"},{"location":"day8/#day-8-loops","text":"Today we will learn about control structure and loops. Control structure and loops are fundamental concept in programming. Hence they are implemented in every programming language. Actually these concepts make a programming language different from calculators. DAY 8: Loops 1. Loops 1.1 While loop 1.2 For Loop 1.2.1 Conditionally Controlling the loop 1.3 Range Function 2. References","title":"DAY 8: Loops"},{"location":"day8/#1-loops","text":"Loops are used to run a block of code again and again based on some condition. There are two kinds of loops most programming language have. While Loop For Loops","title":"1. Loops"},{"location":"day8/#11-while-loop","text":"In python while loop is used to run a block of code again and again till a test is true. A simple example of such code is the following. i = 1 while i < 6 : # code in this block run repeatedly print ( i ) i += 1 >>> 1 2 3 4 5","title":"1.1 While loop"},{"location":"day8/#12-for-loop","text":"A for loop in python is used to iterate over a sequence (list ,tuple, string) or other iterable objects. A simple for loop to print each element of the following numbers = [ 6 , 5 , 3 , 8 , 4 , 2 , 5 ] # given list for iteration for val in numbers : # this code block will run for print ( val ) # each element of iterable 6 5 3 8 4 2 5 A common situation in which for loop is used to store the value of a computation for each element of a list. Suppose we want to find sum of each element of a list, then we can write the following code. numbers = [ 6 , 5 , 3 , 8 , 4 , 2 , 5 ] # given iterable sum = 0 # final value will be stored in sum for val in numbers : # this code will run each element of list sum = sum + val # we add each element in our sum variable # after leaving for loop look at indentation print ( sum ) # finally print the sum 33","title":"1.2 For Loop"},{"location":"day8/#121-conditionally-controlling-the-loop","text":"The for loop does not require any test to be performed in the code. But these are three important cases where for is used with a condition. break: It will terminates the loop based on a test . A common use case is suppose you want to search for some property of element of a list. Then we will break the loop once the condition is met. For example suppose we are looking for number 5 in the given list of numbers. numbers = [ 6 , 5 , 3 , 8 , 4 , 2 , 5 ] # given iterable for val in numbers : # this code will run each element of list if val == 3 : # the for loop will run until this test is satisfied break print ( val ) 6 5 Important You can see that the code will run until the test is satisfied for the first time. continue: It is used to skip the rest of the code inside a loop for the current iteration only. Loop does not terminate but continues on with the next iteration. A common situation is suppose we want to print odd integers only in a given list, then we can skip a code block for even integer as follows numbers = [ 6 , 5 , 3 , 8 , 4 , 2 , 5 ] # given iterable for val in numbers : # this code will run each element of list if val % 2 == 0 : # checks for even value and continue # leave the current iteration print ( val ) 5 3 5 pass: It is a null statement. The statements results into no operation. when it is executed,nothing happens. It is useful as a placeholder,when a statement is required syntactically,but no codes need to be executed. For example we can achieve the above task with the following code with pass . numbers = [ 6 , 5 , 3 , 8 , 4 , 2 , 5 ] # given iterable for val in numbers : # this code will run each element of list if val % 2 == 0 : # checks for even value and pass # leave the current iteration else : print ( val ) 5 3 5","title":"1.2.1 Conditionally Controlling the loop"},{"location":"day8/#13-range-function","text":"In loops, range is used to control how many times the loop will be repeated. It is used to generate a finite sequence of natural numbers based on three arguments. First and last argument is optional. The range function looks like range ( start , stop , step ) start states the integer value at which the sequence begins, if this is not included then start begins at 0 stop is always required and is the integer that is counted up to but not included step sets how much to increase (or decrease in the case of negative numbers) the next iteration, if this is omitted then step defaults to 1 So the range function can be used in three different ways Using Stop Only: We can use the range as only one argument as a positive natural number say n . It will make a iterable of n natural numbers starting with 0 . For example for i in range ( 5 ): print ( i ) 0 1 2 3 4 Using start and stop: We can use range function with two arguments start and stop . It will create a iterable of stop - start natural numbers with start . For example for i in range ( 5 , 10 ): # create iterable start with print ( i ) # 5 of length 10 - 5 = 5 5 6 7 8 9 Using start, stop and step: When all three arguments used, it generate a iterable that will began with natural number start to stop - 1 with a step . For example for i in range ( 1 , 20 , 3 ): print ( i ) 1 4 7 10 13 16 19 Warning The range doesn't make a list. i.e., if you run this code the output will not be a sequence. sequence = range ( 1 , 20 , 3 ) print ( sequence ) range ( 1 , 20 , 3 ) In order to get the list. You have to pass this iterable in list function. sequence = range ( 1 , 20 , 3 ) list_sequence = list ( sequence ) print ( list_sequence ) [ 1 , 4 , 7 , 10 , 13 , 16 , 19 ]","title":"1.3 Range Function"},{"location":"day8/#2-references","text":"W3School on While Loop W3School on For Loop","title":"2. References"},{"location":"day9/","text":"DAY 9: Functions \u00b6 Today we will learn about functions in programming. The functions in programming is similar to mathematical functions which takes input and produce output. But the main idea of function in programming is inspired by one of guiding principle of programming known as don't repeat yourself , also known as DRY . So if some part of code is needs to be written again and again then it means that we can convert this into a function as use them. DAY 9: Functions 1. General Theory 2. Python Function 2.1 General Structure 2.2 Simple Functions 2.3 Recursive Function 3. References 1. General Theory \u00b6 Functions are the foundation of higher level programming language. There are programming language which implements everything based on functions only those are called functional programming language . Although modern languages implement a more abstract thing known as object which is composed of data and methods(function associated with the data). Such programming language are called object oriented programming language , and python is one of them. Recall what have you done till now, you realize everything is a function. For example Variables: If we assign a variable to some value say name = \"sandeep\" , then we make a function name and when we call name we get its value, i.e., \"sandeep\" . Operations: From mathematics we know that operations are actually functions. Control Structure: You can think of it as it takes one or more boolean and assign a value. Two main usage of function is the following: Maximizing Code Reuse and Minimizing Redundancy As I have already mentioned if we use some block of code again and again, we can convert this into a function used it. It is not limited to one program, a complex function written for one program can be used in many programs. Libraries and modules are example of such application. Procedural Decomposition A complex task can be achieved by using a number of small task in a sequence. We can make each such small independent task as it's own function. When we combine all of them, we get our original task. This make the code easy to use, extend and debug. 2. Python Function \u00b6 Now we will see how function is implemented in python language. 2.1 General Structure \u00b6 A general python function has a name for reference. It takes 0 to some finite number of inputs or arguments. It executes some block of code using those arguments. Finally it will return only one value. Return is also optional, you may want to return something or just carry some task without saying anything. The template of a general python function is the following def < name > ( arg1 , arg2 , ... , argN ): # function with name takes N arguments < statements > # block of code executed with arguments return < value > # a value is returned at the end 2.2 Simple Functions \u00b6 Now let's look at some concrete examples Function with no arguments It is quite possible to have a python function with no argument at all. It works a complex variable. For example def light_year (): speed_of_light = 299792458 return speed_of_light * 365 * 24 * 60 * 60 print ( light_year ()) 9454254955488000 Now we can use light year as a variable. Function with few arguments Now let's look at some typical python function def greet ( arg ): return \"Hello \" + arg # whatever it takes add a hello to it print ( greet ( \"Sandeep Suman\" )) Hello Sandeep Suman def prod ( x , y ): return x * y print ( prod ( 2 , 5 )) # product of number print ( prod ( \"Hi!\" , 3 )) # product as string 10 Hi!Hi!Hi! Note You can see that function takes care of the datatypes. Using one function inside other We can also use one function inside other as following def greet ( arg ): return \"Hello \" + arg + \".\" def reading ( name , subject ): return greet ( name ) + \" Do you want to learn \" + subject + \"?\" print ( reading ( \"Sandeep\" , \"Python\" )) print ( reading ( \"Suman\" , \"Mathematics\" )) Hello Sandeep. Do you want to learn Python? Hello Suman. Do you want to learn Mathematics? Using control structure and loops You can combine all your knowledge till now to make more and more complex functions. A function for computing the absolute value of a number is the following: def abs_number ( num ): if num >= 0 : return num else : return ( - 1 ) * num print ( abs_number ( 53 )) print ( abs_number ( 0 )) print ( abs_number ( - 3.14 )) 53 0 3 .14 A function to compute the sum of all elements of a list can be written as def sum_list ( given_list ): sum = 0 for val in given_list : sum = sum + val return sum print ( sum ([ 1 , 2 , 3 ])) # sum of all element of list print ( sum ( range ( 51 ))) # sum of first 50 natural no 6 1275 2.3 Recursive Function \u00b6 Similar to mathematics recursive function are those function which call themselves. A simple example is factorial . def fact ( n ): if n == 0 : # base case return 1 else : # general case return n * fact ( n - 1 ) print ( fact ( 0 )) print ( fact ( 1 )) print ( fact ( 3 )) print ( fact ( 10 )) 1 1 6 3628800 Ex: Make your own function of each type and implement them in python. 3. References \u00b6 W3School on Python Functions Wikipedia The ZEN of Python","title":"Day 9: Functions"},{"location":"day9/#day-9-functions","text":"Today we will learn about functions in programming. The functions in programming is similar to mathematical functions which takes input and produce output. But the main idea of function in programming is inspired by one of guiding principle of programming known as don't repeat yourself , also known as DRY . So if some part of code is needs to be written again and again then it means that we can convert this into a function as use them. DAY 9: Functions 1. General Theory 2. Python Function 2.1 General Structure 2.2 Simple Functions 2.3 Recursive Function 3. References","title":"DAY 9: Functions"},{"location":"day9/#1-general-theory","text":"Functions are the foundation of higher level programming language. There are programming language which implements everything based on functions only those are called functional programming language . Although modern languages implement a more abstract thing known as object which is composed of data and methods(function associated with the data). Such programming language are called object oriented programming language , and python is one of them. Recall what have you done till now, you realize everything is a function. For example Variables: If we assign a variable to some value say name = \"sandeep\" , then we make a function name and when we call name we get its value, i.e., \"sandeep\" . Operations: From mathematics we know that operations are actually functions. Control Structure: You can think of it as it takes one or more boolean and assign a value. Two main usage of function is the following: Maximizing Code Reuse and Minimizing Redundancy As I have already mentioned if we use some block of code again and again, we can convert this into a function used it. It is not limited to one program, a complex function written for one program can be used in many programs. Libraries and modules are example of such application. Procedural Decomposition A complex task can be achieved by using a number of small task in a sequence. We can make each such small independent task as it's own function. When we combine all of them, we get our original task. This make the code easy to use, extend and debug.","title":"1. General Theory"},{"location":"day9/#2-python-function","text":"Now we will see how function is implemented in python language.","title":"2. Python Function"},{"location":"day9/#21-general-structure","text":"A general python function has a name for reference. It takes 0 to some finite number of inputs or arguments. It executes some block of code using those arguments. Finally it will return only one value. Return is also optional, you may want to return something or just carry some task without saying anything. The template of a general python function is the following def < name > ( arg1 , arg2 , ... , argN ): # function with name takes N arguments < statements > # block of code executed with arguments return < value > # a value is returned at the end","title":"2.1 General Structure"},{"location":"day9/#22-simple-functions","text":"Now let's look at some concrete examples Function with no arguments It is quite possible to have a python function with no argument at all. It works a complex variable. For example def light_year (): speed_of_light = 299792458 return speed_of_light * 365 * 24 * 60 * 60 print ( light_year ()) 9454254955488000 Now we can use light year as a variable. Function with few arguments Now let's look at some typical python function def greet ( arg ): return \"Hello \" + arg # whatever it takes add a hello to it print ( greet ( \"Sandeep Suman\" )) Hello Sandeep Suman def prod ( x , y ): return x * y print ( prod ( 2 , 5 )) # product of number print ( prod ( \"Hi!\" , 3 )) # product as string 10 Hi!Hi!Hi! Note You can see that function takes care of the datatypes. Using one function inside other We can also use one function inside other as following def greet ( arg ): return \"Hello \" + arg + \".\" def reading ( name , subject ): return greet ( name ) + \" Do you want to learn \" + subject + \"?\" print ( reading ( \"Sandeep\" , \"Python\" )) print ( reading ( \"Suman\" , \"Mathematics\" )) Hello Sandeep. Do you want to learn Python? Hello Suman. Do you want to learn Mathematics? Using control structure and loops You can combine all your knowledge till now to make more and more complex functions. A function for computing the absolute value of a number is the following: def abs_number ( num ): if num >= 0 : return num else : return ( - 1 ) * num print ( abs_number ( 53 )) print ( abs_number ( 0 )) print ( abs_number ( - 3.14 )) 53 0 3 .14 A function to compute the sum of all elements of a list can be written as def sum_list ( given_list ): sum = 0 for val in given_list : sum = sum + val return sum print ( sum ([ 1 , 2 , 3 ])) # sum of all element of list print ( sum ( range ( 51 ))) # sum of first 50 natural no 6 1275","title":"2.2 Simple Functions"},{"location":"day9/#23-recursive-function","text":"Similar to mathematics recursive function are those function which call themselves. A simple example is factorial . def fact ( n ): if n == 0 : # base case return 1 else : # general case return n * fact ( n - 1 ) print ( fact ( 0 )) print ( fact ( 1 )) print ( fact ( 3 )) print ( fact ( 10 )) 1 1 6 3628800 Ex: Make your own function of each type and implement them in python.","title":"2.3 Recursive Function"},{"location":"day9/#3-references","text":"W3School on Python Functions Wikipedia The ZEN of Python","title":"3. References"},{"location":"quickstart-python/","text":"Quick Start \u00b6 A warm welcome to the Python Programming Workshop . Python is a programming language so before learning anything we have to setup the environment so we can practice the programs. Plebe install python 3 as given below. 1. Installation \u00b6 Programming languages are supposed to be learn on computers. Fortunately now we have apps that can be used to learn python on smartphone. Due to lockdown many faculty members don't have access to the computer. So this programme is designed such that it can be completed on the smartphone. 1.1 Android Smartphone \u00b6 Please install Pydroid 3 IDE(Integrated development environment) from the playstore using the following link Install Pydroid 3 IDE Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the pydroid 3 IDE Write print(\"hello world!\") Press the yellow button on the right bottom, you will see hello world! is printed on a terminal. ` The strength of any programming language lies inside libraries, python has rich libraries bcs it has been around 30 years. To install libraries you need following app as well. For example if we want to install the numpy library, then we have to do the following. 1 2 3 4 5 6 1.2 Computers/Laptops \u00b6 In order to install python on computer, we can use anaconda python 3.x from the bottom of the following page according to your operating system. Download Anaconda Python Warning Tick the option of adding python to the path. Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the spyder app Type python(\"hello world!) You can see hello world printed in output window.","title":"Quick Start"},{"location":"quickstart-python/#quick-start","text":"A warm welcome to the Python Programming Workshop . Python is a programming language so before learning anything we have to setup the environment so we can practice the programs. Plebe install python 3 as given below.","title":"Quick Start"},{"location":"quickstart-python/#1-installation","text":"Programming languages are supposed to be learn on computers. Fortunately now we have apps that can be used to learn python on smartphone. Due to lockdown many faculty members don't have access to the computer. So this programme is designed such that it can be completed on the smartphone.","title":"1. Installation"},{"location":"quickstart-python/#11-android-smartphone","text":"Please install Pydroid 3 IDE(Integrated development environment) from the playstore using the following link Install Pydroid 3 IDE Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the pydroid 3 IDE Write print(\"hello world!\") Press the yellow button on the right bottom, you will see hello world! is printed on a terminal. ` The strength of any programming language lies inside libraries, python has rich libraries bcs it has been around 30 years. To install libraries you need following app as well. For example if we want to install the numpy library, then we have to do the following. 1 2 3 4 5 6","title":"1.1 Android Smartphone"},{"location":"quickstart-python/#12-computerslaptops","text":"In order to install python on computer, we can use anaconda python 3.x from the bottom of the following page according to your operating system. Download Anaconda Python Warning Tick the option of adding python to the path. Running a simple program In order to run a simple python program and test the installation please follow these stpes Open the spyder app Type python(\"hello world!) You can see hello world printed in output window.","title":"1.2 Computers/Laptops"},{"location":"quiz/","text":"Practice Quiz \u00b6 Please ensure to complete the quiz before moving to next topic for each lessen. Common Error While filling the blanks Use the same email-id filled in registration. Don't print unless asked to print something, program runs fine without printing Using np.something, it depends on the way library is imported, so don't write function or variable unless imported this way Don't use unnecessary spaces, like \"var = 5 + 6\" can be written as \"var=5+6\". 1. Links for quizzes \u00b6 Day 1 Quiz Day 2 Quiz Day 3 Quiz Day 4 Quiz Day 5 Quiz Day 6 Quiz Day 7 Quiz Day 8 Quiz Day 9 Quiz Day 10 Quiz Info You can check your rank on the homepage","title":"Practice Quiz"},{"location":"quiz/#practice-quiz","text":"Please ensure to complete the quiz before moving to next topic for each lessen. Common Error While filling the blanks Use the same email-id filled in registration. Don't print unless asked to print something, program runs fine without printing Using np.something, it depends on the way library is imported, so don't write function or variable unless imported this way Don't use unnecessary spaces, like \"var = 5 + 6\" can be written as \"var=5+6\".","title":"Practice Quiz"},{"location":"quiz/#1-links-for-quizzes","text":"Day 1 Quiz Day 2 Quiz Day 3 Quiz Day 4 Quiz Day 5 Quiz Day 6 Quiz Day 7 Quiz Day 8 Quiz Day 9 Quiz Day 10 Quiz Info You can check your rank on the homepage","title":"1. Links for quizzes"},{"location":"welcome/","text":"Welcome to the FDP on Python 3 \u00b6 This page is dedicated to the faculty developemnt programme on python 3, organised by the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur. The banner of the programme is the following \u00b6 Important link \u00b6 Registration Link WhatsApp Group Query Form","title":"Welcome to the FDP on Python 3"},{"location":"welcome/#welcome-to-the-fdp-on-python-3","text":"This page is dedicated to the faculty developemnt programme on python 3, organised by the university department of mathematics, Tilka Manjhi Bhagalpur University, Bhagalpur.","title":"Welcome to the FDP on Python 3"},{"location":"welcome/#the-banner-of-the-programme-is-the-following","text":"","title":"The banner of the programme is the following"},{"location":"welcome/#important-link","text":"Registration Link WhatsApp Group Query Form","title":"Important link"}]}